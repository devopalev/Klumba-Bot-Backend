import re
from abc import ABC, abstractmethod
from typing import List

from telegram import *
from telegram.ext import *
import source.TelegramCommons as TgCommons

from source.Users import BaseUser, Operator
from source.handlers.CreateDeal import BitrixHandler as BH
from source.bitrix import BitrixWorker as BW
from source.bitrix.Deal import Deal
from source.bitrix.Contact import Contact
# from source.handlers.ContactHandler.TgHandlers import CreateContact


# TODO: –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
# 1. –ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å)
# 2. –ò—Å—Ç–æ—á–Ω–∏–∫ (–≤—ã–±—Ä–∞—Ç—å –∏–∑ —Ç–µ–∫—É—â–∏—Ö)
# 3. –û–ö –ó–∞–∫–∞–∑ –∏–ª–∏ –∑–∞—è–≤–∫–∞(—à–∫–æ–ª–∞, –≥–æ—Ä—à–µ—á–∫–∞, —Ñ–∏—Ç–æ–¥–∏–∑, —Å–≤–∞–¥–µ–±–Ω–æ–µ –æ—Ñ–æ—Ä–º)?
# 4. –û–ö –°—Ä–æ—á–Ω—ã–π/–ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π
# 5. –û–ö –û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ (–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ - –ø—Ä–æ–¥–∞–≤–µ—Ü)
# 6. –ö—Ç–æ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑? (—á–µ–ª–æ–≤–µ–∫, –ù–ï —É—á–µ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞)
# 7. –ß—Ç–æ –∑–∞–∫–∞–∑–∞–Ω–æ


def render_text(user: Operator):
    emj_curr = "‚ñ∂"
    emj_wait = "‚òë"
    emj_done = "‚úÖ"
    curr = True
    text = "–≠—Ç–∞–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:"
    if user.create_deal.contact:
        text += f"\n{emj_done} <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {user.create_deal.contact.fullname}"
    else:
        text += f"\n{emj_curr} <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Å–¥–µ–ª–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."
        curr = False

    if user.create_deal.source:
        text += f"\n{emj_done} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {user.create_deal.contact.source}."
    else:
        if curr:
            text += f"\n{emj_curr} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –í—ã–±–∏—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–¥–µ–ª–∫–∏."
            curr = False
        else:
            text += f"\n{emj_wait} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> üß∏"

    if user.create_deal.order_or_form:
        text += f"\n{emj_done} <b>–ó–∞–∫–∞–∑ –∏–ª–∏ –∑–∞—è–≤–∫–∞:</b> {user.create_deal.contact.order_or_form}."
    else:
        if curr:
            text += f"\n{emj_curr} <b>–ó–∞–∫–∞–∑ –∏–ª–∏ –∑–∞—è–≤–∫–∞:</b> –í—ã–±–∏—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏."
            curr = False
        else:
            text += f"\n{emj_wait} <b>–ó–∞–∫–∞–∑ –∏–ª–∏ –∑–∞—è–≤–∫–∞:</b> üß∏"

    if user.create_deal.urgent_or_advance:
        text += f"\n{emj_done} <b>–°—Ä–æ—á–Ω—ã–π/–ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π:</b> {user.create_deal.contact.urgent_or_advance}."
    else:
        if curr:
            text += f"\n{emj_curr} <b>–°—Ä–æ—á–Ω—ã–π/–ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π:</b> –í—ã–±–∏—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏."
            curr = False
        else:
            text += f"\n{emj_wait} <b>–°—Ä–æ—á–Ω—ã–π/–ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π:</b> üß∏"

    if user.create_deal.sales_department:
        text += f"\n{emj_done} <b>–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂:</b> {user.create_deal.contact.sales_department}."
    else:
        if curr:
            text += f"\n{emj_curr} <b>–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂:</b> –í—ã–±–∏—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂"
            curr = False
        else:
            text += f"\n{emj_wait} <b>–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂:</b> üß∏"

    if user.create_deal.order_contents:
        text += f"\n{emj_done} <b>–ß—Ç–æ –∑–∞–∫–∞–∑–∞–Ω–æ:</b> {user.create_deal.contact.order_contents}."
    else:
        if curr:
            text += f"\n{emj_curr} <b>–ß—Ç–æ –∑–∞–∫–∞–∑–∞–Ω–æ:</b> –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∑–∞–∫–∞–∑–∞–Ω–æ"
        else:
            text += f"\n{emj_wait} <b>–ß—Ç–æ –∑–∞–∫–∞–∑–∞–Ω–æ:</b> üß∏"
    return text


class Source:
    access = BaseUser

    def __init__(self):
        self.base_cb = "CreateDeal:Source:"
        self.handler = CallbackQueryHandler(self.processing, pattern=self.base_cb)

    @TgCommons.pre_handler(access_user=access)
    def create_keyboard(self):
        example = {'79066213885': '[–†–û–ó–ù–ò–¶–ê] (–ø—Ä–∏—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –Ω–æ–≥–∞–º–∏)', 'CALL': '[–ó–í–û–ù–û–ö]',
                   'STORE': '[–°–ê–ô–¢ KLUMBA71.ru] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω (–Ω–µ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—Ç—å)',
                   '79066213913': '[–Æ–õ–Ø] - —Å –µ–µ –∏–Ω—Å—Ç—ã, –æ–±—Ä–∞—â–µ–Ω–∏–π. –°–µ—Ä–≤–∏—Å –∫–ª–∞—É–¥, –æ—Å—Ç',
                   '79066213908': '[–ö–û–†–ü–´] - –¢–µ–Ω–¥–µ—Ä—ã, –î—É–º–∞, –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –ì–æ—Å—É—Ö–∞',
                   'SELF': '[–û–ë–†–ê–¢–ò–õ–ò–°–¨ –õ–ò–ß–ù–û –ö –°–û–¢–†–£–î–ù–ò–ö–£ –ö–õ–£–ú–ë–´]',
                   '9606198454': '[KLUMBA] 9606198454 (–º–æ–± —Ç–µ–ª –∫–ª—É–º–±–∞)',
                   'EMPLOYEE': '[–°–û–¢–†–£–î–ù–ò–ö –ö–õ–£–ú–ë–´] - —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º', '79066213900': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - –§–ª–æ—É–≤–æ—É',
                   '9674317205': '9674317205', '79674317205': '79674317205',
                   '79066213899': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - –†—É—Å—Å–∫–∏–π –±—É–∫–µ—Ç', '79636236615': '79636236615',
                   '79674317266': '79674317266',
                   '39|TELEGRAM_UNLIM': 'Telegram - [KLUMBA] - Telegram',
                   '39|TELEGRAM': 'Telegram - [KLUMBA] - Telegram',
                   '3|OLCHAT_WA_CONNECTOR_2': '[OLChat] WhatsApp - –ê–†–•–ò–í–ù–ê–Ø (–û—Ç–∫—Ä—ã—Ç–∞—è –ª–∏–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏)',
                   '37|OLCHAT_WA_CONNECTOR_2': '[OLChat] WhatsApp - [KLUMBA] - WHATSAPP –û–ë–©–ò–ô +79051129113',
                   '79652420419': '79652420419', '9674317233': '9674317233',
                   '37|WAAPP_REDHAM': 'WhatsApp - [KLUMBA] - WHATSAPP –û–ë–©–ò–ô +79051129113',
                   '79066213901': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - –ö–∏–±–µ—Ä—Ñ–ª–æ—Ä–∏—Å—Ç', '37|WAAPP': 'waApp - –û—Ç–∫—Ä—ã—Ç–∞—è –ª–∏–Ω–∏—è 19',
                   '79066213898': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - –≠–¥–µ–ª—å–≤–µ–π—Å', '79066213904': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - –ò–Ω—Ç–µ—Ä—Ñ–ª–æ—Ä–∞',
                   '79066213902': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - –§–ª–æ—Ä–∞-—ç–∫—Å–ø—Ä–µ—Å—Å', '79066213905': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - –ö–∏–±–µ—Ä—Ñ–ª–æ—Ä–∞',
                   '79066213906': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - –ì—Ä–∞–Ω–¥—Ñ–ª–æ—Ä–∞', '79066213912': '[–ü–∞—Ä—Ç–Ω–µ—Ä—ã] - UFL',
                   '2|TELEGRAM': 'Telegram - –õ–∞–Ω–¥—à–∞—Ñ—Ç(–æ—Ç–∫.–ª–∏–Ω–∏—è)', 'CALLBACK': '[KLUMBA] - –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
                   '79066213891': '[KLUMBA] - insta klumba_delivery',
                   '79066213887': '[KLUMBA] - Whatsapp (–ü–ï–†–í–´–ô) +7(960)-619-84-54',
                   '79066213893': '[KLUMBA] - Whatsapp (–í–¢–û–†–û–ô) +7(961)-145-01-66', '79066213890': '[KLUMBA] - vk',
                   '79066213896': '[KLUMBA] - —á–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ klumba71.ru',
                   '35|NOTIFICATIONS': '[KLUMBA] - sms/wa (by b24)-  –ë–∏—Ç—Ä–∏–∫—Å24 –°–ú–° –∏ WhatsApp',
                   '29|NOTIFICATIONS': '[KLUMBA] –ë–∏—Ç—Ä–∏–∫—Å24 –°–ú–° –∏ WhatsApp', 'WEBFORM': '[KLUMBA] CRM-—Ñ–æ—Ä–º–∞(—Å —Å–∞–π—Ç–∞?)',
                   '79066213881': '–í–∏–¥–∂–µ—Ç —Å–∞–π—Ç–∞ klumba71.ru', '79066213909': '[CVETYVTULE] - avito',
                   '9611450166': '[tel] 9611450166  (–º–æ–± —Ç–µ–ª —Ü–≤.–≤ —Ç—É–ª–µ)', '79066213897': '[WORKSHOP] - inst 1.0',
                   '79066213910': '[WORKSHOP] - Inst 2.0',
                   '79066213911': '[WORKSHOP] WA [9056263396] - –í–µ—Ä–æ–Ω–∏–∫–∞ –®–∞–≤–æ—Ö–∏–Ω–∞',
                   '9056263396': '[tel] 9056263396 (–º–æ–± —Ç–µ–ª. WORKSHOP)',
                   '79066213914': '[9622769990] - –ò–ª—å—è - –õ–∞–Ω–¥—à–∞—Ñ—Ç WA',
                   '79066213883': '[OPT-CVETY.RU] –§–û–†–ú–ê –û–ø—Ç–æ–≤—ã–π –õ–µ–Ω–¥–∏–Ω–≥',
                   '9|OPENLINE': '[OPT-CVETY.RU] -–û–Ω–ª–∞–π–Ω-—á–∞—Ç - –û—Ç–∫—Ä—ã—Ç–∞—è –ª–∏–Ω–∏—è –¥–ª—è', 'RC_GENERATOR': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂',
                   '74991105735': '74991105735', '79066213907': '–∫–æ—Ä–ø—ã –∞—Ä—Ö–∏–≤', '9066213879': '[tel] - –¢—É—Ä–≥–µ–Ω–µ–≤—Å–∫–∞—è',
                   '3|PACT_WHATSAPP_CONNECTOR_40723': 'pact_whatsapp_connector_40723 - –ê–†–•–ò–í–ù–ê–Ø (–û—Ç–∫—Ä—ã—Ç–∞—è –ª–∏–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏)',
                   'UC_OVUYJJ': '–†–µ–∫–ª–∞–º–∞—Ü–∏—è', '79652420420': '[–ó–í–û–ù–û–ö/–ö–ª—É–º–±–∞/717266(2gis)]',
                   '9622787828': '[–ú–û–†–ï –¶–í–ï–¢–û–í] +7(962)278-78-28',
                   '9674317206': '[–ú–û–†–ï –¶–í–ï–¢–û–í] +7(967)431-72-06(71-72-06)', '49|VK': '[–ú–û–†–ï –¶–í–ï–¢–û–í] - VK',
                   '45|AVITO': '[–ú–û–†–ï –¶–í–ï–¢–û–í] - AVITO', '79066213892': '[–ú–û–†–ï –¶–í–ï–¢–û–í] - –ò–Ω—Å—Ç–∞–≥—Ä–∞–º-–î–∏—Ä–µ–∫—Ç',
                   '79066213915': '[–ú–û–†–ï –¶–í–ï–¢–û–í] Whatsapp +7962-278-78-28',
                   '79652420421': '[–ú–û–†–ï –¶–í–ï–¢–û–í] WA +7(905)112-91-54',
                   'UC_WXZAOE': '[–ú–û–†–ï –¶–í–ï–¢–û–í] –†–æ–∑–Ω–∏—Ü–∞ (–ø—Ä–∏—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –Ω–æ–≥–∞–º–∏)',
                   'UC_Q1XYM0': '[–ú–û–†–ï –¶–í–ï–¢–û–í] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'UC_YT0KP4': '–°–æ–Ω—è',
                   'UC_5MH4OE': 'CRM-—Ñ–æ—Ä–º–∞ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è (HR)', '79652420422': 'Sberlead',
                   '79674317267': 'WhatsApp - [KLUMBA] - WHATSAPP –†–∞—Å—Å—ã–ª–∫–∞'}

        keyboard = InlineKeyboardMarkup([x for x in BH.source])

    def processing(self):
        pass


class OrderOrForm:
    access = BaseUser

    def __init__(self, base_cb, other_buttons=None, exit_func=None):
        if other_buttons is None:
            other_buttons = []
        self.base_cb = f"{base_cb}:OrderOrForm:"
        self.handler = CallbackQueryHandler(self.processing, pattern=self.base_cb)
        self.other_buttons = other_buttons
        self.exit_func = exit_func

    def create_keyboard(self):
        field: BW.Field = BW.Bitrix.data.fields.get(Deal.Fields.ORDER_OR_FORM)
        if field:
            keyboard = [[InlineKeyboardButton(item['VALUE'], callback_data=self.base_cb + item['ID'])]
                        for item in field.items]
            keyboard.extend([[btn] for btn in self.other_buttons])
            return InlineKeyboardMarkup(keyboard)

    @TgCommons.pre_handler(access_user=access)
    def entry(self, update: Update, context: CallbackContext, user: BaseUser):
        keyboard = self.create_keyboard()
        text = "–ó–∞–∫–∞–∑ –∏–ª–∏ –∑–∞—è–≤–∫–∞?"
        update.callback_query.message.edit_text(text, reply_markup=keyboard)

    @TgCommons.pre_handler(access_user=access)
    def processing(self, update: Update, context: CallbackContext, user: BaseUser):
        selected = update.callback_query.data.split(':')[2]
        user.deal.order_or_form = selected

        if self.exit_func:
            self.exit_func(update, context)


class UrgentOrAdvance:
    access = BaseUser

    def __init__(self, base_cb, other_buttons=None, exit_func=None):
        if other_buttons is None:
            other_buttons = []
        self.base_cb = f"{base_cb}:UrgentOrAdvance:"
        self.handler = CallbackQueryHandler(self.processing, pattern=self.base_cb)
        self.other_buttons = other_buttons
        self.exit_func = exit_func

    def create_keyboard(self):
        field: BW.Field = BW.Bitrix.data.fields.get(Deal.Fields.URGENT_OR_ADVANCE)
        if field:
            keyboard = [[InlineKeyboardButton(item['VALUE'], callback_data=self.base_cb + item['ID'])]
                        for item in field.items]
            keyboard.extend([[btn] for btn in self.other_buttons])
            return InlineKeyboardMarkup(keyboard)

    @TgCommons.pre_handler(access_user=access)
    def entry(self, update: Update, context: CallbackContext, user: BaseUser):
        keyboard = self.create_keyboard()
        text = "–°—Ä–æ—á–Ω—ã–π –∏–ª–∏ –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π?"
        update.callback_query.message.edit_text(text, reply_markup=keyboard)

    @TgCommons.pre_handler(access_user=access)
    def processing(self, update: Update, context: CallbackContext, user: BaseUser):
        selected = update.callback_query.data.split(':')[2]
        user.deal.urgent_or_advance = selected

        if self.exit_func:
            self.exit_func(update, context)


class SalesDepartament:
    access = BaseUser

    def __init__(self, base_cb, other_buttons=None, exit_func=None):
        if other_buttons is None:
            other_buttons = []
        self.base_cb = f"{base_cb}:SalesDepartament:"
        self.handler = CallbackQueryHandler(self.processing, pattern=self.base_cb)
        self.other_buttons = other_buttons
        self.exit_func = exit_func

    def create_keyboard(self):
        field: BW.Field = BW.Bitrix.data.fields.get(Deal.Fields.SALES_DEPARTAMENT)
        if field:
            keyboard = [[InlineKeyboardButton(item['VALUE'], callback_data=self.base_cb + item['ID'])]
                        for item in field.items]
            keyboard.extend([[btn] for btn in self.other_buttons])
            return InlineKeyboardMarkup(keyboard)

    @TgCommons.pre_handler(access_user=access)
    def entry(self, update: Update, context: CallbackContext, user: BaseUser):
        keyboard = self.create_keyboard()
        text = "–í—ã–±–∏—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂"
        update.callback_query.message.edit_text(text, reply_markup=keyboard)

    @TgCommons.pre_handler(access_user=access)
    def processing(self, update: Update, context: CallbackContext, user: BaseUser):
        selected = update.callback_query.data.split(':')[2]
        user.deal.sales_department = selected

        if self.exit_func:
            self.exit_func(update, context)


# TODO: –î–æ–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
class CreateDeal:
    class Buttons:
        ENTRY = InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É üê£", callback_data="create_deal")
        CHANGE_SOURCE = InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫")
        CB_CONTACT = "bitrix_contact:"
        CB_SOURCE = "CreateDeal:Source:"

        def __init__(self, cancel):
            self.CANCEL = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")

    class State:
        WAITING_CONTACT = 410

    access = BaseUser

    def __init__(self, cancel):
        self.buttons = self.Buttons(cancel)
        self.base_cb = "CreateDeal"
        # –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–Ω–∏–∑—É -> –≤–≤–µ—Ä—Ö –∏–∑ –∑–∞ exit function
        sales_departament = SalesDepartament(self.base_cb, exit_func=None)
        urgent_or_advance = UrgentOrAdvance(self.base_cb, exit_func=sales_departament.entry)
        order_or_form = OrderOrForm(self.base_cb, exit_func=urgent_or_advance.entry)

        self.cv_handler = ConversationHandler(entry_points=[],
                                              states={},
                                              fallbacks=[])

    @TgCommons.pre_handler(access_user=access)
    def source(self):
        source = BH.source

    @TgCommons.pre_handler(access_user=access)
    def type_deal(self):
        pass

    @TgCommons.pre_handler(access_user=access)
    def emergency(self):
        pass

    @TgCommons.pre_handler(access_user=access)
    def sales_department(self):
        pass

    @TgCommons.pre_handler(access_user=access)
    def order_received_by(self):
        pass

    @TgCommons.pre_handler(access_user=access)
    def order_contents(self):
        pass

    @TgCommons.pre_handler(access_user=access)
    def callback_handler(self):
        pass

    @TgCommons.pre_handler(access_user=access)
    def handler(self, update: Update, context: CallbackContext, user):
        pass
